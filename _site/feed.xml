<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-09-30T10:32:29-05:00</updated><id>/</id><title type="html">Amir’s programming blog</title><subtitle>The goal of this blog is write a story behind each library or framework I write or even my experiments with other libraries. I found the GitHub repo README insufficient and kind of too formal and I hope this blog would fill the gap.</subtitle><entry><title type="html">Dynamic-type-builder C# library</title><link href="/programming-blog/2018/06/10/typebuilder.html" rel="alternate" type="text/html" title="Dynamic-type-builder C# library" /><published>2018-06-10T00:16:11-05:00</published><updated>2018-06-10T00:16:11-05:00</updated><id>/programming-blog/2018/06/10/typebuilder</id><content type="html" xml:base="/programming-blog/2018/06/10/typebuilder.html">&lt;p&gt;I really wanted to create a type on the fly by extending an existing type and then add some extra properties to
it. Thanks to &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Reflection.Emit&lt;/code&gt; written by Mono team it is possible to achieve this in dotnet core. This
package comes with a &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeBuilder&lt;/code&gt; class but using it is really not a straightforward thing to do. Hence I created
this small library to do the job (&lt;a href=&quot;&amp;quot;https://github.com/amir734jj/CustomTypeBuilder&amp;quot;&quot;&gt;repo url with nuget package too&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Start the type building
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Builders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomTypeBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Useful while generating nested types, you can re-use `moduleBuilder`
&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetModuleBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moduleBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetModuleBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moduleBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Extend an existing type
&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FinalizeOptionsBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DummyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Add properties
&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Age&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Class level attribute
&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RequiredAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Or instantiate this type and cast to DummyClass, or use `Activator.CreateInstance`
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// .Instantiate&amp;lt;DummyClass&amp;gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After type is created, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;Activator.CreateInstance(type)&lt;/code&gt; to instantiate an instance of type
and also we can use reflection to set properties. In our example because we extended &lt;code class=&quot;highlighter-rouge&quot;&gt;DummyClass&lt;/code&gt;, we can
up-cast the object to &lt;code class=&quot;highlighter-rouge&quot;&gt;DummyClass&lt;/code&gt; in order to access &lt;code class=&quot;highlighter-rouge&quot;&gt;DummyClass&lt;/code&gt; fields statically without using reflection.
One thing I noticed is that types don’t really show up while debugging in Rider, but they show perfectly in
Visual Studio.&lt;/p&gt;

&lt;p&gt;As always, I appreciate any feedback or contribution.&lt;/p&gt;</content><author><name></name></author><summary type="html">I really wanted to create a type on the fly by extending an existing type and then add some extra properties to it. Thanks to System.Reflection.Emit written by Mono team it is possible to achieve this in dotnet core. This package comes with a TypeBuilder class but using it is really not a straightforward thing to do. Hence I created this small library to do the job (repo url with nuget package too). Example: // Start the type building var type = Builders.CustomTypeBuilder.New() // Useful while generating nested types, you can re-use `moduleBuilder` .GetModuleBuilder(out var moduleBuilder) .SetModuleBuilder(moduleBuilder) // Extend an existing type .FinalizeOptionsBuilder().Extend&amp;lt;DummyClass&amp;gt;() // Add properties .AddProperty&amp;lt;string&amp;gt;(&quot;Name&quot;) .AddProperty&amp;lt;int&amp;gt;(&quot;Age&quot;) // Class level attribute .AddAttribute(new RequiredAttribute()) .Compile(); // Or instantiate this type and cast to DummyClass, or use `Activator.CreateInstance` // .Instantiate&amp;lt;DummyClass&amp;gt;() After type is created, we can use Activator.CreateInstance(type) to instantiate an instance of type and also we can use reflection to set properties. In our example because we extended DummyClass, we can up-cast the object to DummyClass in order to access DummyClass fields statically without using reflection. One thing I noticed is that types don’t really show up while debugging in Rider, but they show perfectly in Visual Studio. As always, I appreciate any feedback or contribution.</summary></entry><entry><title type="html">Local-date C# library</title><link href="/programming-blog/2018/06/10/localdate.html" rel="alternate" type="text/html" title="Local-date C# library" /><published>2018-06-10T00:16:11-05:00</published><updated>2018-06-10T00:16:11-05:00</updated><id>/programming-blog/2018/06/10/localdate</id><content type="html" xml:base="/programming-blog/2018/06/10/localdate.html">&lt;p&gt;After learning the hard truth that C# does not come with a date only type and &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; contains both
the date and time, I started the journey to find the best library that fills the gap. I experimented with
NodaTime library’s &lt;code class=&quot;highlighter-rouge&quot;&gt;LocalDate&lt;/code&gt; class but I found it difficult to use for very basic stuff like &lt;code class=&quot;highlighter-rouge&quot;&gt;ToString&lt;/code&gt;
formatting and parsing given string and an optional pattern. Hence I decided to write my own
(&lt;a href=&quot;https://github.com/amir734jj/LocalDate&quot;&gt;repo url with nuget package too&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Of course to represent a date, we only need three integers (&lt;code class=&quot;highlighter-rouge&quot;&gt;year&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;month&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;day&lt;/code&gt;), but I wanted more
than that. Hence I created a class called &lt;code class=&quot;highlighter-rouge&quot;&gt;LocalDate&lt;/code&gt; that extends &lt;code class=&quot;highlighter-rouge&quot;&gt;LocalDateStruct&lt;/code&gt; (it’s not actually a struct
because structs in C# are actually sealed classed!). I added Julian day number hence code can handle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AddDays(int days)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AddMonth(int months)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AddYear(int year)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SubtractDays(int days)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SubtractMonth(int months)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SubtractYear(int year)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ToString(string formatter)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ParseLocalDate(string str)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The repo README contain a lot more examples. But the last thing I really to mention was the JSON.NET and Mongo
driver bson custom serializer and bson serializers. I used &lt;code class=&quot;highlighter-rouge&quot;&gt;ToString&lt;/code&gt; to serialize and &lt;code class=&quot;highlighter-rouge&quot;&gt;ParseLocalDate&lt;/code&gt; for 
deserialize. The reason I treated this &lt;code class=&quot;highlighter-rouge&quot;&gt;LocalDate&lt;/code&gt; as a value type rather than POCO or model. I wanted this
library to be more similar to C# &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; which is in fact a &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; rather than a “library”.&lt;/p&gt;

&lt;p&gt;As always, I appreciate any feedback or contribution.&lt;/p&gt;</content><author><name></name></author><summary type="html">After learning the hard truth that C# does not come with a date only type and DateTime contains both the date and time, I started the journey to find the best library that fills the gap. I experimented with NodaTime library’s LocalDate class but I found it difficult to use for very basic stuff like ToString formatting and parsing given string and an optional pattern. Hence I decided to write my own (repo url with nuget package too). Of course to represent a date, we only need three integers (year, month and day), but I wanted more than that. Hence I created a class called LocalDate that extends LocalDateStruct (it’s not actually a struct because structs in C# are actually sealed classed!). I added Julian day number hence code can handle: AddDays(int days) AddMonth(int months) AddYear(int year) SubtractDays(int days) SubtractMonth(int months) SubtractYear(int year) ToString(string formatter) ParseLocalDate(string str) The repo README contain a lot more examples. But the last thing I really to mention was the JSON.NET and Mongo driver bson custom serializer and bson serializers. I used ToString to serialize and ParseLocalDate for deserialize. The reason I treated this LocalDate as a value type rather than POCO or model. I wanted this library to be more similar to C# DateTime which is in fact a struct rather than a “library”. As always, I appreciate any feedback or contribution.</summary></entry><entry><title type="html">Dynamic-map C# library</title><link href="/programming-blog/2018/06/06/dynamic-map.html" rel="alternate" type="text/html" title="Dynamic-map C# library" /><published>2018-06-06T00:16:11-05:00</published><updated>2018-06-06T00:16:11-05:00</updated><id>/programming-blog/2018/06/06/dynamic-map</id><content type="html" xml:base="/programming-blog/2018/06/06/dynamic-map.html">&lt;p&gt;I searched for hours for a library similar to AutoMapper but to map an object to a Type. In other words,
instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&amp;lt;TSource, TDestination&amp;gt;(obj)&lt;/code&gt;, having something like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;Map(typeof(TDestination), obj)&lt;/code&gt;.
I even had an idea to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Activator.CreateInstance()&lt;/code&gt; to dynamically run the generic method call of
&lt;code class=&quot;highlighter-rouge&quot;&gt;Map&amp;lt;TSource, TDestination&amp;gt;(obj)&lt;/code&gt; to substitute the static generic type but I realized AutoMapper also
needs a mapping profile. Writing that would be complicated … really complicated.&lt;/p&gt;

&lt;p&gt;I could not find anything, therefore, I tried to write my own (it works for simple types, but mapping
&lt;code class=&quot;highlighter-rouge&quot;&gt;IEnumerables&lt;/code&gt; is kind of tricky). But later I found out that &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoMapper&lt;/code&gt; has an overload &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; method
to map dynamic types. So, there is no reason to use my library but still (I am biased here … I wrote
the code) but it is very simple and customizable. (&lt;a href=&quot;https://github.com/amir734jj/DynamicMap&quot;&gt;repo url with nuget package too&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The interesting part of this library is how easy it is to create a mapper profile in it to map type &lt;code class=&quot;highlighter-rouge&quot;&gt;A -&amp;gt; B&lt;/code&gt;.
Any special mapper should implement &lt;code class=&quot;highlighter-rouge&quot;&gt;ISpecialMapper&lt;/code&gt;, but there are a lot to implement, hence extend
&lt;code class=&quot;highlighter-rouge&quot;&gt;BaseDynamicMap&lt;/code&gt; class too. So, implement any method that is needed to make your custom mapper to work
and just use &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseDynamicMap&lt;/code&gt; methods when you don’t what to change default mapping behavior.&lt;/p&gt;

&lt;p&gt;There is a &lt;code class=&quot;highlighter-rouge&quot;&gt;IsComplexType&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;PropertyInfoStructSource&lt;/code&gt; model that is generated by &lt;code class=&quot;highlighter-rouge&quot;&gt;SourceToPropertyInfoStruct&lt;/code&gt;
virtual methods. If the flag is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, they that specific property will be mapper recursively or will be
treated as a complex type.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomClassSpecialMapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseDynamicMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpecialMapper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// returns new instance of this mapper, needed due to the recursive nature of this library
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpecialMapper&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomClassSpecialMapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// if true then this mapper will be used
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MatchingMapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destinationType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// order of custom mapper
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Existing custom mapping profiles:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JObject&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.NET&lt;/code&gt; object representation. Hence this library supports &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.NET&lt;/code&gt; objects out of the box&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ExpandoObject&lt;/code&gt;: It is essentially an &lt;code class=&quot;highlighter-rouge&quot;&gt;IDictionay&amp;lt;string, object&amp;gt;&lt;/code&gt;, it can be very handy sometimes.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IEnumerable&lt;/code&gt;: any type of &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;New&lt;/code&gt; is needed to duplicate the instance of custom mapping profile&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Order()&lt;/code&gt; is the order of your mapping profile. Because there are types like &lt;code class=&quot;highlighter-rouge&quot;&gt;ExpandoObject&lt;/code&gt; that extend
&lt;code class=&quot;highlighter-rouge&quot;&gt;IDictionay&amp;lt;string, object&amp;gt;&lt;/code&gt; and itself extends &lt;code class=&quot;highlighter-rouge&quot;&gt;IEnumerable&lt;/code&gt; too. So make sure order is selected carefully.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MatchingMapper&lt;/code&gt; is used to check whether if custom profile should be used or not.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As always, I appreciate any feedback or contribution.&lt;/p&gt;</content><author><name></name></author><summary type="html">I searched for hours for a library similar to AutoMapper but to map an object to a Type. In other words, instead of Map&amp;lt;TSource, TDestination&amp;gt;(obj), having something like this: Map(typeof(TDestination), obj). I even had an idea to use Activator.CreateInstance() to dynamically run the generic method call of Map&amp;lt;TSource, TDestination&amp;gt;(obj) to substitute the static generic type but I realized AutoMapper also needs a mapping profile. Writing that would be complicated … really complicated. I could not find anything, therefore, I tried to write my own (it works for simple types, but mapping IEnumerables is kind of tricky). But later I found out that AutoMapper has an overload Map method to map dynamic types. So, there is no reason to use my library but still (I am biased here … I wrote the code) but it is very simple and customizable. (repo url with nuget package too). The interesting part of this library is how easy it is to create a mapper profile in it to map type A -&amp;gt; B. Any special mapper should implement ISpecialMapper, but there are a lot to implement, hence extend BaseDynamicMap class too. So, implement any method that is needed to make your custom mapper to work and just use base or BaseDynamicMap methods when you don’t what to change default mapping behavior. There is a IsComplexType in PropertyInfoStructSource model that is generated by SourceToPropertyInfoStruct virtual methods. If the flag is set to true, they that specific property will be mapper recursively or will be treated as a complex type. Example: public class CustomClassSpecialMapper: BaseDynamicMap, ISpecialMapper { // returns new instance of this mapper, needed due to the recursive nature of this library public new ISpecialMapper New() =&amp;gt; new CustomClassSpecialMapper(); // if true then this mapper will be used public bool MatchingMapper(Type destinationType, Type sourceType, object sourceObj) { return sourceType == typeof(CustomClass); } // order of custom mapper public int Order() =&amp;gt; 4; } Existing custom mapping profiles: JObject: JSON.NET object representation. Hence this library supports JSON.NET objects out of the box ExpandoObject: It is essentially an IDictionay&amp;lt;string, object&amp;gt;, it can be very handy sometimes. IEnumerable: any type of List Notes: New is needed to duplicate the instance of custom mapping profile Order() is the order of your mapping profile. Because there are types like ExpandoObject that extend IDictionay&amp;lt;string, object&amp;gt; and itself extends IEnumerable too. So make sure order is selected carefully. MatchingMapper is used to check whether if custom profile should be used or not. As always, I appreciate any feedback or contribution.</summary></entry><entry><title type="html">Defended M.S. Thesis</title><link href="/personal/2017/04/22/thesis-defence.html" rel="alternate" type="text/html" title="Defended M.S. Thesis" /><published>2017-04-22T00:16:11-05:00</published><updated>2017-04-22T00:16:11-05:00</updated><id>/personal/2017/04/22/thesis-defence</id><content type="html" xml:base="/personal/2017/04/22/thesis-defence.html">&lt;p&gt;Yesterday, I defended my M.S. Thesis. My committee members (&lt;a href=&quot;https://uwm.edu/engineering/people/wang-ph-d-lingfeng/&quot;&gt;Dr.  Lingfeng Wang&lt;/a&gt; and &lt;a href=&quot;https://uwm.edu/engineering/people/dumitrescu-ph-d-adrian/&quot;&gt;Dr. Adrian Dumitrescu&lt;/a&gt;) were helpful. Thesis presentation was 45 minutes and 10 minutes questions. In the end, I was congratulated by my advisor (&lt;a href=&quot;https://uwm.edu/engineering/people/xu-ph-d-guangwu/&quot;&gt;Dr. Guangwu Xu&lt;/a&gt;) and committee members. My &lt;a href=&quot;/assets/files/supplemental/(long) Thesis_presentation.pdf&quot;&gt;presentation&lt;/a&gt; and Thesis (&lt;a href=&quot;/assets/files/supplemental/(short) Thesis.pdf&quot;&gt;short version&lt;/a&gt;, &lt;a href=&quot;/assets/files/supplemental/(long) Thesis.pdf&quot;&gt;long version&lt;/a&gt;) is available here.&lt;/p&gt;</content><author><name></name></author><summary type="html">Yesterday, I defended my M.S. Thesis. My committee members (Dr.  Lingfeng Wang and Dr. Adrian Dumitrescu) were helpful. Thesis presentation was 45 minutes and 10 minutes questions. In the end, I was congratulated by my advisor (Dr. Guangwu Xu) and committee members. My presentation and Thesis (short version, long version) is available here.</summary></entry><entry><title type="html">Implementing R-LWE-KEX protocols via SageMath</title><link href="/personal/2016/11/25/rlwe-kex-sagemath.html" rel="alternate" type="text/html" title="Implementing R-LWE-KEX protocols via SageMath" /><published>2016-11-25T23:16:11-06:00</published><updated>2016-11-25T23:16:11-06:00</updated><id>/personal/2016/11/25/rlwe-kex-sagemath</id><content type="html" xml:base="/personal/2016/11/25/rlwe-kex-sagemath.html">&lt;p&gt;&lt;strong&gt;Basics of R-LWE key exchange&lt;/strong&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Ring_learning_with_errors_key_exchange&quot;&gt;more information here&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alice: &lt;script type=&quot;math/tex&quot;&gt;e, s \leftarrow \chi \&lt;/script&gt; &lt;script type=&quot;math/tex&quot;&gt;b=as+e\&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bob: &lt;script type=&quot;math/tex&quot;&gt;e', s' \leftarrow \chi\&lt;/script&gt; &lt;script type=&quot;math/tex&quot;&gt;b'=as'+e'\&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Alice’s key: &lt;script type=&quot;math/tex&quot;&gt;\to s*(as' + e') = ass' + se'\&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Bob’s key: &lt;script type=&quot;math/tex&quot;&gt;\to s'*(as + e) = ass' + s'e\&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, &lt;script type=&quot;math/tex&quot;&gt;\to s*(as' + e')\&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;\neq\&lt;/script&gt;&lt;script type=&quot;math/tex&quot;&gt;s'*(as + e)\&lt;/script&gt; but they are close considering that error is relatively small. This is why we need a reconciliation method that sends an special signal (such that message interceptor cannot use that signal to learn about the shared key) to other party.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.cims.nyu.edu/~regev/papers/lwesurvey.pdf&quot;&gt;&lt;strong&gt;Regev method&lt;/strong&gt;&lt;/a&gt;: In 2005, Prof. Oded Regev introduced a R-LWE key exchange protocol. The reconciliation was simple did not need have any signal to be sent. Thus, there was a probability of &lt;script type=&quot;math/tex&quot;&gt;\frac{1}{2^{10}}&lt;/script&gt; that shared key did not match. This method is not practical but it was a great starting point (&lt;a href=&quot;https://github.com/amir734jj/LWE-KEX/blob/master/Regev.sage&quot;&gt;implementation&lt;/a&gt;, &lt;a href=&quot;https://sagecell.sagemath.org/?z=eJytVMtu2zAQvBvwP2ydQ6jEUGK3KYo8CqQImkMvrXPJswYtrWS2EqlQUmD_fZeiHpRdpwhQH2xpd3Z2djl0pFUKOY_Rzwte5H4o8kKLRVkIJau3QGOB85iXeS64nGcqWUuVCp6ASDOlC7iqMdc15Mph-N6ib3iaJaiHg-EgFCnKnLJwASeTKVSfPQgx1oigIuh65MNBqsIyKXPCTk8-Hk8adB0eDnIRp5yyn47yZ12w6UEmPMpXYdNtD36UqhAoC4cXtJDxcDDzz28_U20nc0Zxdv2V1fSeV7dr5odIYBIakUIWGKMmBXf--cqwzPznuhO7_cnaKT04hIlXsQTrIFEFNQosT7UNjCBGiZrTmlFrpZl3OhzUO3FXBQylKuMlREpDhXQm8uAM4IVr0hggoev5DU1Er286JHZ__7C_2n8aw8nYEnnMs1zEUWoJdyyym3nzZ2vkboQdc3fPZ_9_wJb8lUFtwMrWdOYvc42BkoFIkBn1jexAYRSJwBjA2NWk_IRkNJS_cU3hh6eGz3y_8KTE-YTijc-PYOqmppR67x_DgQP44DIYMzidyZc9IbW2DX3GrTPmBLwO1p1U8ySizQ6ayxhZLX7cSPVO-yw0sM-zDGXIJk4DTHLcjTz2uua9oxiN_F9KSJbyjNHZjk2RZ2jtLb9Zco0hpJyOfQXskjK5DV383Wy27DIRZKdqALrK3LzNczRW2l1nUfYGXmxd3iZfcRqjWhUH0CM_BIfFSvmiFq2QhVr8U4bB7BZhslsSHNpDaOu79rRSW2m96g7iFreY-UJIrg1082LUgN6WK3bLafk7jf3tOKjdHVpI1YM8yraLbIsu0jg0o___AkbfcJ0bxwTLdyM3scQVo98twjFMjeMcA7tEoQKpioZvDKNHab4rktPHgp5f5W0LSHIf3p-hAv8BBadkdQ==&amp;amp;lang=sage&quot;&gt;test the code&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://eprint.iacr.org/2012/688.pdf&quot;&gt;Ding method&lt;/a&gt;&lt;/strong&gt;: In 2012, Prof. Ding introduced a R-LWE key exchange reconciliation method that I think it was revolutionary. For the first time, it intruded the concept of signaling (or some reconciliation information). This method generated biased key and it should not be used in a real world environment (&lt;a href=&quot;https://github.com/amir734jj/LWE-KEX/blob/master/Ding.sage&quot;&gt;implementation&lt;/a&gt;, &lt;a href=&quot;https://sagecell.sagemath.org/?z=eJytVU1v1DAQvUfKfxhaIZx2m25XBUGhSKAKDlygXFoQrLzJJGtI7NRO6C6_nnGcD2-3pYDIyTsfb948e2YzrUowPMfY1Lw2cSpMrcWiqYWS7a9EY43znDfGCC7nlSrWUpWCFyDKSukazrqYt13ImYfwfoj-yMuqQB0GYZCKEqUhL5zC0XR2DPbbhRRzjQgqg7GGCYNSpU3RGIo9nj57cgRddGcOAyPykpP36aG50jWb7VUiIn9rttV24UOjaoGy9nBBC5mHwXn84uIl5Y40z8nO3r5hHXwUdeX6_iETWKSWpJA15qiJwWX8YmVRzuOrrhK7-MqGLiPYh6OoRUnWSaFqKpQ4nFYNzCBHiZqTzKi10iw6CYNOE0-qx8BQqiZfQqY0tJFeRxE8B_jBNXFMkKK7_i1MRj__6pLYp0-fH60efZnA44kDiljksAij0RIuWeaU-ddvq_OxkzvaH8_P_3-fA_hv-nUGRzulZzIfuFOKJN62hZ57ojDLRGIfg3261hUXxKXHdSnk-fylx21boDv1UumRbSCdbMvYn0R2M1FzmSM7yApFT6qfokM4jiagVSPTDVv7Rk9GuJFjzKsKKXoajV4sDP42-CiyF-wJ6Nz9rbfyaUyUTESBrXATuP5T7b7j-j7hJrAQrQg_RcV8PK_MjVJ2gM_92GizwU25LXybQAcv8MoZ--3ROUY_Ue8lYn4tkt8i7gFjV3Bg18UhzGj5POz3nD3OIr_jXeALA9eiKGiXrKBeIghjmnaBHkzj6XQax_HGHezsxN-UkKzkFaOpmIA9CCuWPRDaxPKL6KM0tzo_LrnGlPw0RCtgr8hjnOn09tF1aa8KQcP5gxcN0n7k9tfcoB3Mu_NclFtrp1sbsfe3mHbsHYs92ADfB5gNtjbT8XmtFgObhVrcy8XG3M3Eerd4eLD7LYkBY6RA6oZBjWV1D7h74H7Dt-CPOGFw3e7HW1ZShzbizhdCcr3u48cZ7Px2Pvw7_BPKjqgjPWqzdTU3SQ9pd3IaInpWtOTYdpqrOlr6Aa_oT76GnXe4NvYFJ8sHO75jiSv7-rcAJ3bywsDbcT5QqkCqusf7BfOI1GA=&amp;amp;lang=sage&quot;&gt;test the code&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://eprint.iacr.org/2014/070.pdf&quot;&gt;&lt;strong&gt;Peikert method&lt;/strong&gt;&lt;/a&gt;: In 2014, Prof. Peikert introduced a R-LWE key exchange reconciliation method that used the concept of signaling similar to Prof. Ding’s method but fixed the issue of biased key using randomized doubly function. This method is practical, easy to implement and it can be used in a read world environment (&lt;a href=&quot;https://github.com/amir734jj/LWE-KEX/blob/master/Peikert.sage&quot;&gt;implementation&lt;/a&gt;, &lt;a href=&quot;https://sagecell.sagemath.org/?z=eJy1VkuT0zgQvrvK_6EZikKeyZjEk9nahQlVUNRy2MvucAGG2ZRjy4nAloxkw4RfT8vyQ7bj8Fg2B1es7v7665faLMuFLICXWb53nUSKDFS4pb4qwkL5MVOFZJuyYIJXb5GkBV1vw1IpFvJ1LtI9FxkLU2AG6EWt87JWeWEh_N1qvwqzPKXSdVwnZhnlCqWwgsU8WMJ9iOlWUgoigQ5fuU4m4jItFeot53_8tgDUrI9cR7FtFqLk90fqoyxIcJozD-XVsfZyH_4pRcEoLyxMkIxvXefav3r9FG07etd4Tl7-SWp4z3OdN_7VnVa69j_WQOT1v6Ql78EZLDzQnKJ9lIoCcSJIGE3jKkiaQLxJSSRokrBIm8-goFm-blw8dh20BkxdKTkAgQBOgaEXsGzAg3NTKl-GPBaZH-0Eiyi5OV_MYD6Dxe0M8tXN3A8u8d2vHsHlrYeGD3r-jDdDbEs5lSGWlUopJGmoYB2s0lwCoVyU2x0kQkKlaWXSgycAn0KJBY8oatd51zAJvv5QU5C3b28e3j3ESJB-BeQRr5edNyTRqf7pX1ORNvAukInou_9Pfn2YLfiRcBvKOWUfqCzWLXW04EhbR9BQtxpGD4sW-SlSaWCNCUpubps20E-7PVBIdAM23QksAabWIo7bmQCaKgqDdqoygZ1h9yzjPUY1yQFRPVnXpJoRmBwS7GKvs-486h8StKfLgysMoWf8CJYeILd3fQgyNrvAyMemOHADF0_HLgLPe9zHN9n2wzynPCYLKwCdwKPK80q51wt17YbtIGkkeMRSWjXCDD5_by98oPtf3AgG41OYlnS90OajFOEdNs6uTh3eoeOS2XjBGO8cDlerwTsotTEvDnFcIu7cgNi6y0r3wp8fAB1HFUxGFVhdcHBoZrBh1eR8Ybndc8oq7X-foN70aIcrXMGDjkSJ7QRbvimtngdbdNWIggFE3WeHRmBiDAYW8-NDM0XxYpri8v-i2BvWkxP_vWCcZGFOcBPMtIFXXeX6g-TVLpQ0hizEHXEH5BkKlDlaHd5MxuxZigvfhIHTFuq3taJ670zbGS2ztFejfd_IK0y91QyLU-iBn4GFYqg8F5uWyEZsvklD60yT0NIRBQv2DFr7zj1m1HWqDj8ObO45O84BdofhOp_1TTmxaGuwDna9YTyUe8uku4xrFT20dvEq0oaL4dWF3k-6pXXMTavUONLLcGxp_HQnzUWS42dwASd_0b3S3Rjt7p3Ygh29I_pDdAg408vOdazZsIFiAVwUDd5X3qO7Uw==&amp;amp;lang=sage&quot;&gt;test the code&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://eprint.iacr.org/2015/1092.pdf&quot;&gt;&lt;strong&gt;NewHope method&lt;/strong&gt;&lt;/a&gt;: In 2015, Prof. Schwabe introduced a R-LWE key exchange reconciliation method that used the concept of signaling similar to Prof. Ding’s method, and a generalized randomized doubly function similar to Prof. Peikert’s method but faster to implement (thanks to optimizations in the implementation) and more secure by using relatively smaller modulus, hence, increasing impact of error. This method can be used in a read world environment (&lt;a href=&quot;https://github.com/amir734jj/LWE-KEX/blob/master/newHope.sage&quot;&gt;implementation&lt;/a&gt;, &lt;a href=&quot;https://sagecell.sagemath.org/?z=eJytVt9v2zYQfrYA_Q-35KFU4ip20AzbmgzoULQYtgFb-tLWyARaomx2EqmSlBP3r9-R1A_ajpsN6Esgk3fffXff3TGlkjVoumKpNtTotODaKL5sDZfC_coVMyxb0VZrTkXWyGorZM1pBbxupDLwurN525m8DhD-HKzf0bqpmIqjcghYy6KtmE5LxVjmf2RcGLZiqsf-1f_8nRrDcxZH3TE3TBkpKz0F0dbN9jHUgtNaiiLLW_QVqx4xp1XeVhRT2kglheRZzqoqjuKo4DUTGknDDcxnly_gFAq2Qm4gSxjT1nHkQrQa7V7Mfvx-DmjZHcWR5qua4s0PF_qzMuTyrOEJ3rtjG-UU_mql4UyYABMUMoyj2_T6_c_oO1btFs_J2zekg0-SOPqQXj9Yo9v0cwdE3v9NBvIJnMM8Acsp3-aVNIiTQ8lZVdjwul1mYaI2S8VyKXJecWolAzSBwcRTXrOqQVHKVuTGHRashJWSbcMKYsWgy4qhFslPcTTBXmiVgC-8IWcLezlYJHdnInGlRncuuMEM-RdGnNuaVmW2YbmRCnkt5heXUOInR0NQVKwY2eGe3NlQ9D5bUs2tFH9Q7LoHsljMgSM63NzAJ2CVZjBzQJ-OAnn7a9itzfO59w55fZ0QpjbJpcJymn1WA9EkZTlWU4oMsWqSOJ2k2GA_A8Gcp-D-pGnqvhIwEshsCrP-zNVv0o1JVvnBwEC7k0J2eFhiNeV-eNesUE76xychpGowTV25riBBGTyFTmayR2UKe5EGwYtlhbRYWfLcdm0PFrTM4S02s_8gftBTZFTIOs3X0ma5wLLM76bQ3Cxm6RVWKb26S-Cs98EmwgHsZ-cp9WBgumICGxYLw5RCGEfxFMKxuQLChGxXawfqzIJxTuAlwIYqXIZOm274JyV-_69tST5-XDx7eIYZYnIOJSHJWK8PpDzkPNJ4jPj4_fIbMxyQn2Iq2P1aNvik9IzRXCBbS9wxDtrAjtDi9jbsmwQu-m3rih9cWW0tSlohZWI3BKLZB81m6aD8kXXbWON-hYURp7t7wDGabGzpsH-7xtokfgYmuDn22j3FaTZ4pANbBzEQQagDHwyMtUzgOWysrV08B057g5bictdM95OCcby3dRtyTmnTMFGQ_mBndAerfWX6B4E5TaZw_61lmfzDtrtyFLwsmWLCLhAnjX0-7qf_SaHjEk2QtFQFF9hmeN2vBcTEmjR2mzqujQ1INrhsRhoJ3I0ahyjH1fOKYWp91efJrpjB1WxHiZOT9JPkgtS0IThsU0BL32Jx9PSCdb0xPqbe7RTeraliBVrbFwjIK7zQ_ujm8W3h3V5V9kHZ0Kq1jUHtr0wzuxGO-3krvwZvDtZnf-8w7bLxLM5gB_wcAhRP5Re5HIgs5fJJGtbmOAl7e0AhgD2HwX8Mj0LEkWF18wSwb-gwzz3sESOO7tH02BbswEbYbImNp7aByzienYmd0FA8R9pz8bzG1HeLHlh9Lcxg1AfCkSCHnj7OeOIGosF_bQ2c_Ma22rZivv7uZDhdswfb3QdQU7i03d8PTghRSBDS9Ej_AqhSPww=&amp;amp;lang=sage&quot;&gt;test the code&lt;/a&gt;). &lt;a href=&quot;https://github.com/amir734jj/LWE-KEX&quot;&gt;GitHub link&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Basics of R-LWE key exchange (more information here): Alice: Bob: Alice’s key: Bob’s key: As you can see,  but they are close considering that error is relatively small. This is why we need a reconciliation method that sends an special signal (such that message interceptor cannot use that signal to learn about the shared key) to other party. Regev method: In 2005, Prof. Oded Regev introduced a R-LWE key exchange protocol. The reconciliation was simple did not need have any signal to be sent. Thus, there was a probability of that shared key did not match. This method is not practical but it was a great starting point (implementation, test the code). Ding method: In 2012, Prof. Ding introduced a R-LWE key exchange reconciliation method that I think it was revolutionary. For the first time, it intruded the concept of signaling (or some reconciliation information). This method generated biased key and it should not be used in a real world environment (implementation, test the code). Peikert method: In 2014, Prof. Peikert introduced a R-LWE key exchange reconciliation method that used the concept of signaling similar to Prof. Ding’s method but fixed the issue of biased key using randomized doubly function. This method is practical, easy to implement and it can be used in a read world environment (implementation, test the code). NewHope method: In 2015, Prof. Schwabe introduced a R-LWE key exchange reconciliation method that used the concept of signaling similar to Prof. Ding’s method, and a generalized randomized doubly function similar to Prof. Peikert’s method but faster to implement (thanks to optimizations in the implementation) and more secure by using relatively smaller modulus, hence, increasing impact of error. This method can be used in a read world environment (implementation, test the code). GitHub link.</summary></entry><entry><title type="html">Sage Math is all I needed in a programming language!</title><link href="/personal/2016/10/04/sagemath.html" rel="alternate" type="text/html" title="Sage Math is all I needed in a programming language!" /><published>2016-10-04T00:16:11-05:00</published><updated>2016-10-04T00:16:11-05:00</updated><id>/personal/2016/10/04/sagemath</id><content type="html" xml:base="/personal/2016/10/04/sagemath.html">&lt;p&gt;Writing a blog which is something I have never done before and by reading my previous blog posts, it is clear that I struggled with a proper number theory library. &lt;a href=&quot;http://www.shoup.net/ntl/&quot;&gt;NTL&lt;/a&gt; and &lt;a href=&quot;https://github.com/wbhart/flint2&quot;&gt;FLINT&lt;/a&gt; are great number theory packages written in C for people who have studied and used number theory for a long time and speed is their primary concern. On the other hand, there are people like me who have just learned about number theory and want to implement something without spending so much time learning a different programming language and a library that has been around for 10+ years (constantly being improved and new functionalities being introduced to).&lt;/p&gt;

&lt;p&gt;I am not a expert in Python (i.e. specially with data structures and dictionaries) but I can implement something in Python although it would take more time in comparison to java. &lt;a href=&quot;http://www.sagemath.org/&quot;&gt;Sage&lt;/a&gt; was a perfect combination for me because I am familiar with both Python and some NTL. I was able to quickly start coding with Sage and I never went back to use NTL or trying to re-implement the library in java and then write my code in java.&lt;/p&gt;

&lt;p&gt;I give Sage a lot of credit for it’s powerful polynomial parser. After trying to implement Implement a Multivariable Polynomial ring using java and seeing how difficult it is to implement a proper polynomial parser to works with edge cases, although it was a rewarding experience, it was time consuming. It took my about a month to write a library by working day and night.&lt;/p&gt;

&lt;p&gt;I also give Sage credit for it’s LLL implementation. I used NTL’s LLL implementation. Getting it working with NTL’s BigInteger implementation is not straightforward. However, using LLL in sage is just one line of code: &lt;code class=&quot;highlighter-rouge&quot;&gt;LLL(matrix)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sage uses many open source libraries and links them all together using Python. It is a simple idea but it required clever implementation which Sage truly delivers. It is fascinating to see a smart type system that handle the linkage between all those open source libraries.&lt;/p&gt;

&lt;p&gt;I highly recommend to watch the following presentation by &lt;a href=&quot;https://en.wikipedia.org/wiki/William_A._Stein&quot;&gt;William Stein&lt;/a&gt; (creator of Sage) in which he discusses history behind Sage and why it is truly a programming language to rule them all!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=6eIoYMB_0Xc&quot; title=&quot;Video&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/6eIoYMB_0Xc/0.jpg&quot; alt=&quot;YouTube video&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Writing a blog which is something I have never done before and by reading my previous blog posts, it is clear that I struggled with a proper number theory library. NTL and FLINT are great number theory packages written in C for people who have studied and used number theory for a long time and speed is their primary concern. On the other hand, there are people like me who have just learned about number theory and want to implement something without spending so much time learning a different programming language and a library that has been around for 10+ years (constantly being improved and new functionalities being introduced to). I am not a expert in Python (i.e. specially with data structures and dictionaries) but I can implement something in Python although it would take more time in comparison to java. Sage was a perfect combination for me because I am familiar with both Python and some NTL. I was able to quickly start coding with Sage and I never went back to use NTL or trying to re-implement the library in java and then write my code in java. I give Sage a lot of credit for it’s powerful polynomial parser. After trying to implement Implement a Multivariable Polynomial ring using java and seeing how difficult it is to implement a proper polynomial parser to works with edge cases, although it was a rewarding experience, it was time consuming. It took my about a month to write a library by working day and night. I also give Sage credit for it’s LLL implementation. I used NTL’s LLL implementation. Getting it working with NTL’s BigInteger implementation is not straightforward. However, using LLL in sage is just one line of code: LLL(matrix) Sage uses many open source libraries and links them all together using Python. It is a simple idea but it required clever implementation which Sage truly delivers. It is fascinating to see a smart type system that handle the linkage between all those open source libraries. I highly recommend to watch the following presentation by William Stein (creator of Sage) in which he discusses history behind Sage and why it is truly a programming language to rule them all!</summary></entry><entry><title type="html">Journey with JavaScript trying to implement LLL</title><link href="/personal/2016/10/03/javascript-LLL.html" rel="alternate" type="text/html" title="Journey with JavaScript trying to implement LLL" /><published>2016-10-03T00:16:11-05:00</published><updated>2016-10-03T00:16:11-05:00</updated><id>/personal/2016/10/03/javascript-LLL</id><content type="html" xml:base="/personal/2016/10/03/javascript-LLL.html">&lt;p&gt;Fresh out of my summer internship at &lt;a href=&quot;https://www.northwesternmutual.com&quot;&gt;Northwestern mutual&lt;/a&gt; and working extensively with JavaScript and Node.js, I was reading about &lt;a href=&quot;https://en.wikipedia.org/wiki/Lenstra%E2%80%93Lenstra%E2%80%93Lov%C3%A1sz_lattice_basis_reduction_algorithm&quot;&gt;LLL&lt;/a&gt; and basics of lattice and lattice cryptography. I tried installing NTL on my Windows machine. It was a nightmare. Lack of documentation for such an important library was just astonishing. I did not have any success with Windows. Thereafter, I installed Ubuntu (in fact, I never switched backed to Windows) and had some success with NTL on Ubuntu. But the complication of NTL’s type system and again lack of documentation halted my efforts.&lt;/p&gt;

&lt;p&gt;I decided to implement LLL myself to see how complicated it would be. My language of choice was JavaScript. Bad idea. Lack of built-in BigInteger was a limitation. Not to mention, concept of Matrix does not exist in JavaScript, I simply used 2 dimensional array instead. Furthermore, I had to implement &lt;a href=&quot;https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process&quot;&gt;Gram-Schmidt process&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Determinant&quot;&gt;Matrix determinant&lt;/a&gt; for an arbitrarily sized matrix all from scratch. My code worked after all, but slow speed and lack of modular implementation turned this mini project to one of my least favorite and cumbersome projects. Most importantly, it was a rewarding effort. I was able to see the promise of polynomial running time of lattice reduction with respect to delta constant. Shortly after I finished implementing the code, I learned that Sage math has a built-in LLL implementation which I did not know about. After learning about it, I started reading more about Sage math.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/amir734jj/JavaScript_EMC6_linear_algebra_tools&quot;&gt;GitHub link&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Fresh out of my summer internship at Northwestern mutual and working extensively with JavaScript and Node.js, I was reading about LLL and basics of lattice and lattice cryptography. I tried installing NTL on my Windows machine. It was a nightmare. Lack of documentation for such an important library was just astonishing. I did not have any success with Windows. Thereafter, I installed Ubuntu (in fact, I never switched backed to Windows) and had some success with NTL on Ubuntu. But the complication of NTL’s type system and again lack of documentation halted my efforts. I decided to implement LLL myself to see how complicated it would be. My language of choice was JavaScript. Bad idea. Lack of built-in BigInteger was a limitation. Not to mention, concept of Matrix does not exist in JavaScript, I simply used 2 dimensional array instead. Furthermore, I had to implement Gram-Schmidt process and Matrix determinant for an arbitrarily sized matrix all from scratch. My code worked after all, but slow speed and lack of modular implementation turned this mini project to one of my least favorite and cumbersome projects. Most importantly, it was a rewarding effort. I was able to see the promise of polynomial running time of lattice reduction with respect to delta constant. Shortly after I finished implementing the code, I learned that Sage math has a built-in LLL implementation which I did not know about. After learning about it, I started reading more about Sage math. GitHub link</summary></entry><entry><title type="html">Multivariable Polynomial ring using java’s BigInteger library</title><link href="/personal/2016/07/28/polynomial-library.html" rel="alternate" type="text/html" title="Multivariable Polynomial ring using java's BigInteger library" /><published>2016-07-28T00:16:11-05:00</published><updated>2016-07-28T00:16:11-05:00</updated><id>/personal/2016/07/28/polynomial-library</id><content type="html" xml:base="/personal/2016/07/28/polynomial-library.html">&lt;p&gt;After disappointing and certainty a long fail journey trying to learn &lt;a href=&quot;http://www.shoup.net/ntl/&quot;&gt;NTL&lt;/a&gt; (Number Theory package written in C++), I decided to write my own Ring implementation. In short, it was a difficult talk but I learned a lot.&lt;/p&gt;

&lt;p&gt;Let’s discuss the details. I needed a two classes: Monomial and Ring plus enum class to handle operations. Now, the key design choice is how to store the relationships between Monomials and operations. For example, &lt;a href=&quot;http://ring.perisic.com/&quot;&gt;this&lt;/a&gt; library written in java as well, uses String to store the relationship. The last thing a programmer wants is being confused by String manipulations. Therefore, I used Array of Objects to store the relationships.&lt;/p&gt;

&lt;p&gt;After successfully implementing Monomial, Ring and operations (enum) classes, it was a time to tackle the most challenging part. Handling evaluation and making sure order of operations is preserved. To handle that, I needed to loop through the Array 4 times (add, multiply, divide, subtract). Thereafter, for every two Monomial in Array (first pass is for multiplication, second for division and so on), evaluate them and replace them with the evaluated result back in the Array. In the end, result Array should contain only one element it should be a BigInteger value.&lt;/p&gt;

&lt;p&gt;As of now, code supports String parsing a complex Polynomial Ring including nested Rings. The followings are just some examples that code is able evaluate correctly thanks to the specified order of operations for each operation.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/amir734jj/a2f7440e4ed5163fce11231dae019b1d.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amir734jj/BigIntegerRing&quot;&gt;GitHub link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://amir734jj.github.io/BigIntegerRing/&quot;&gt;java docs&lt;/a&gt; (Hosted by GitHub).&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">After disappointing and certainty a long fail journey trying to learn NTL (Number Theory package written in C++), I decided to write my own Ring implementation. In short, it was a difficult talk but I learned a lot. Let’s discuss the details. I needed a two classes: Monomial and Ring plus enum class to handle operations. Now, the key design choice is how to store the relationships between Monomials and operations. For example, this library written in java as well, uses String to store the relationship. The last thing a programmer wants is being confused by String manipulations. Therefore, I used Array of Objects to store the relationships. After successfully implementing Monomial, Ring and operations (enum) classes, it was a time to tackle the most challenging part. Handling evaluation and making sure order of operations is preserved. To handle that, I needed to loop through the Array 4 times (add, multiply, divide, subtract). Thereafter, for every two Monomial in Array (first pass is for multiplication, second for division and so on), evaluate them and replace them with the evaluated result back in the Array. In the end, result Array should contain only one element it should be a BigInteger value. As of now, code supports String parsing a complex Polynomial Ring including nested Rings. The followings are just some examples that code is able evaluate correctly thanks to the specified order of operations for each operation. GitHub link java docs (Hosted by GitHub).</summary></entry><entry><title type="html">University Portal as part of Intelligent user interface course</title><link href="/personal/2016/07/27/uwm-now-portal.html" rel="alternate" type="text/html" title="University Portal as part of Intelligent user interface course" /><published>2016-07-27T00:16:11-05:00</published><updated>2016-07-27T00:16:11-05:00</updated><id>/personal/2016/07/27/uwm-now-portal</id><content type="html" xml:base="/personal/2016/07/27/uwm-now-portal.html">&lt;p&gt;As part of Intelligent user interface course, we‌ (students) were asked to come up with a project that demonstrates our understanding on course materials. By materials, I mean research papers that we read every week. To come up with a project idea, I looked for a problem. Something that I can do better.&lt;/p&gt;

&lt;p&gt;That thing for me was &lt;a href=&quot;http://www4.uwm.edu/&quot;&gt;UWM website&lt;/a&gt; (main page). It is inefficient in delivering the content. It is too simply designed that we can question it’s existence. Navigating a website is unhelpful. I believe that home page of university website should be customized based on user’s classes after user (i.e. student) is logged in. To make the matter worse, UWM students have to go to another website called “&lt;a href=&quot;http://d2l.uwm.edu/&quot;&gt;D2L&lt;/a&gt;”, log-in and then see their class discussions. To see the official class schedule, students have to visit another website called “&lt;a href=&quot;https://paws.uwm.edu/psp/saprod/?cmd=login&quot;&gt;PAWS&lt;/a&gt;”. This is what I call inconvenience. Now, what is not very easy to see in class discussions section of D2L is that Professors/Instructors are also able to see the discussion. Hence, students may feel uncomfortable sharing their thoughts and asking certain questions (e.g. about homework that is due). It is a recipe for failure.&lt;/p&gt;

&lt;p&gt;I came up with a portal/website called “UWM Now” that addresses these issue. It provides a prejudice-free environment for students to communicate, discuss and learn together. This portal addresses all the deficiency that I mentioned plus interesting features such as weather (current temperature, forecast hourly and daily), news (Twitter style, 140 words) and a simple tool for evaluating a difficulty of student’s schedule.&lt;/p&gt;

&lt;p&gt;Now, let’s focus on the code that make such a system possible. I used Node.js, Express.js and SQLite. However, this was the time I used a ORM to handle database interactions. The ORM I chose was Sequelize.js which was initially difficult to learn but I quickly got used to it. Learning a promises and resolving a promise was definitely a challenge. But it was worth the time learning a new tool. I will always try to avoid writing a pure SQL queries in String and executing them. It takes too much time.&lt;/p&gt;

&lt;p&gt;My portal got a mixed reaction by my Professor. She liked some parts and expected more in other parts. But, the fact is all other teams had active team members. But my team mate was not helpful at all. He did not write a single line of code. I practically did everything by myself and I simply run out of time and patience. However, I hope my code would act as a good starting point for others.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amir734jj/UWMNow/&quot;&gt;GitHub link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://amir734jj.github.io/UWMNow/demo.mp4&quot;&gt;Demo video&lt;/a&gt; (Hosted by GitHub).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://amir734jj.github.io/UWMNow/overview.mp4&quot;&gt;Overview video&lt;/a&gt; (Hosted by GitHub).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://amir734jj.github.io/UWMNow/Final_Presentation.pptx&quot;&gt;PowerPoint presentation&lt;/a&gt; (Hosted by GitHub).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://amir734jj.github.io/UWMNow/Project_Report.pdf&quot;&gt;Project report&lt;/a&gt; (Hosted by GitHub).&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">As part of Intelligent user interface course, we‌ (students) were asked to come up with a project that demonstrates our understanding on course materials. By materials, I mean research papers that we read every week. To come up with a project idea, I looked for a problem. Something that I can do better. That thing for me was UWM website (main page). It is inefficient in delivering the content. It is too simply designed that we can question it’s existence. Navigating a website is unhelpful. I believe that home page of university website should be customized based on user’s classes after user (i.e. student) is logged in. To make the matter worse, UWM students have to go to another website called “D2L”, log-in and then see their class discussions. To see the official class schedule, students have to visit another website called “PAWS”. This is what I call inconvenience. Now, what is not very easy to see in class discussions section of D2L is that Professors/Instructors are also able to see the discussion. Hence, students may feel uncomfortable sharing their thoughts and asking certain questions (e.g. about homework that is due). It is a recipe for failure. I came up with a portal/website called “UWM Now” that addresses these issue. It provides a prejudice-free environment for students to communicate, discuss and learn together. This portal addresses all the deficiency that I mentioned plus interesting features such as weather (current temperature, forecast hourly and daily), news (Twitter style, 140 words) and a simple tool for evaluating a difficulty of student’s schedule. Now, let’s focus on the code that make such a system possible. I used Node.js, Express.js and SQLite. However, this was the time I used a ORM to handle database interactions. The ORM I chose was Sequelize.js which was initially difficult to learn but I quickly got used to it. Learning a promises and resolving a promise was definitely a challenge. But it was worth the time learning a new tool. I will always try to avoid writing a pure SQL queries in String and executing them. It takes too much time. My portal got a mixed reaction by my Professor. She liked some parts and expected more in other parts. But, the fact is all other teams had active team members. But my team mate was not helpful at all. He did not write a single line of code. I practically did everything by myself and I simply run out of time and patience. However, I hope my code would act as a good starting point for others. GitHub link Demo video (Hosted by GitHub). Overview video (Hosted by GitHub). PowerPoint presentation (Hosted by GitHub). Project report (Hosted by GitHub).</summary></entry><entry><title type="html">Naturalization exam practice website</title><link href="/personal/2015/08/02/naturalization-exam.html" rel="alternate" type="text/html" title="Naturalization exam practice website" /><published>2015-08-02T00:16:11-05:00</published><updated>2015-08-02T00:16:11-05:00</updated><id>/personal/2015/08/02/naturalization-exam</id><content type="html" xml:base="/personal/2015/08/02/naturalization-exam.html">&lt;p&gt;I believe it is not practical to go to an exam without proper studying and major part of any study is to look over sample questions or previous exams. As a person who was going to take a naturalization exam, which is a exam that I needed to pass in order to become U.S. citizen after five years of waiting. It is an important exam for any green card holder. It is a major step forward. While studying the preparation handbook, I felt the need of a website that uses scoring system to make the learning more enjoyable (gamification). A website that simplifies the learning and make it more efficient. I could not find such a website on the web. Hence, I wrote my own. I used “free to download” audio and photos from USCIS website and created a data structure of them to present to user. In addition, I used SQLite to create a simple to use database of users and their scores.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amir734jj/USCIS-civic-test&quot;&gt;GitHub link&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://amir734jj.github.io/USCIS_CivicTest/screenshot1.png&quot; title=&quot;Screenshot1: Multiple choice practice questions&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/amir734jj/USCIS-civic-test/master/screenshot/screenshot1.png&quot; alt=&quot;Screenshot1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://amir734jj.github.io/USCIS_CivicTest/screenshot1.png&quot; title=&quot;Screenshot2: Multiple choice practice questions&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/amir734jj/USCIS-civic-test/master/screenshot/screenshot2.png&quot; alt=&quot;Screenshot2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I believe it is not practical to go to an exam without proper studying and major part of any study is to look over sample questions or previous exams. As a person who was going to take a naturalization exam, which is a exam that I needed to pass in order to become U.S. citizen after five years of waiting. It is an important exam for any green card holder. It is a major step forward. While studying the preparation handbook, I felt the need of a website that uses scoring system to make the learning more enjoyable (gamification). A website that simplifies the learning and make it more efficient. I could not find such a website on the web. Hence, I wrote my own. I used “free to download” audio and photos from USCIS website and created a data structure of them to present to user. In addition, I used SQLite to create a simple to use database of users and their scores. GitHub link.</summary></entry></feed>